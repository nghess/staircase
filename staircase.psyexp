<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.1.1">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/test_data'" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="staircase" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code" plugin="None">
        <Param val="import os&amp;#10;import cv2&amp;#10;import time&amp;#10;import random&amp;#10;import numpy as np&amp;#10;from numpy import inf&amp;#10;import matplotlib.pyplot as plt&amp;#10;from matplotlib import animation&amp;#10;&amp;#10;# Variables&amp;#10;beta_hi = 4&amp;#10;beta_lo = 2&amp;#10;target = 3&amp;#10;count = 0&amp;#10;&amp;#10;# Converge numbers function&amp;#10;def converge_numbers(numbers, target, i):&amp;#10;&amp;#10;    converged_numbers = []&amp;#10;    &amp;#10;    for number in numbers:&amp;#10;        #Should this be a set interval, or a set step size?&amp;#10;        # Probably, a policy where the step size decreases 3 times or so works.&amp;#10;        pseudo_random_shift = .05#round(random.uniform(0, abs(target - number)/3), 2)&amp;#10;        print(pseudo_random_shift)&amp;#10;&amp;#10;        if number &gt; target:&amp;#10;            new_number = number - pseudo_random_shift&amp;#10;        elif number &lt; target:&amp;#10;            new_number = number + pseudo_random_shift&amp;#10;&amp;#10;        converged_numbers.append(new_number)&amp;#10;&amp;#10;    return converged_numbers&amp;#10;&amp;#10;# Fractal generator class&amp;#10;class Generate:&amp;#10;    # Generate 2d or 3d fractal&amp;#10;    def __init__(self, beta=4, seed=117, size=256, dimension=2, preview=False, save=False, method=&quot;ifft&quot;):&amp;#10;        # Set Seed&amp;#10;        np.random.seed(seed)&amp;#10;        # Set Size&amp;#10;        size = size+1&amp;#10;        # Set properties&amp;#10;        self.beta = beta&amp;#10;        self.seed = seed&amp;#10;        self.size = size&amp;#10;        self.dimension = dimension&amp;#10;&amp;#10;        #Alert related&amp;#10;        assert self.dimension == 2 or self.dimension == 3, &quot;Dimension must be either 2 or 3&quot;&amp;#10;        np.seterr(divide='ignore')&amp;#10;&amp;#10;        if dimension == 2 and method == &quot;ifft&quot;:&amp;#10;            # Build power spectrum&amp;#10;            f = [x/size for x in range(0, int(size/2)+1)] + [x/size for x in range(-int(size/2), 0)]&amp;#10;            u = np.reshape(f, (size, 1))&amp;#10;            v = np.reshape(f, (1, size))&amp;#10;            powerspectrum = (u**2 + v**2)**(-beta/2)&amp;#10;            powerspectrum[powerspectrum == inf] = powerspectrum[0,1]&amp;#10;            # Noise and ifft&amp;#10;            phases = np.random.normal(0, 255, size=[size, size])&amp;#10;            pattern = np.fft.ifftn(powerspectrum**0.5 * (np.cos(2*np.pi*phases)+1j*np.sin(2*np.pi*phases)))&amp;#10;            # Normalize result&amp;#10;            pattern = np.real(pattern)&amp;#10;            self.pattern = (pattern-np.amin(pattern))/np.amax(pattern-np.amin(pattern))&amp;#10;&amp;#10;        if dimension == 3 and method == &quot;ifft&quot;:&amp;#10;            # Build power spectrum&amp;#10;            f = np.around([x/size for x in range(0, int(size/2)+1)] + [x/size for x in range(-int(size/2), 0)], 4)&amp;#10;            u = np.reshape(f, (size, 1))&amp;#10;            v = np.reshape(f, (1, size))&amp;#10;            w = np.reshape(f, (size, 1, 1))&amp;#10;            powerspectrum = (u**2 + v**2 + w**2)**(-beta/2)&amp;#10;            powerspectrum[powerspectrum == inf] = powerspectrum[0,1,0]&amp;#10;            # Noise and ifft&amp;#10;            phases = np.random.normal(0, 255, size=[size, size, size])&amp;#10;            pattern = np.fft.ifftn(powerspectrum**0.5 * (np.cos(2*np.pi*phases)+1j*np.sin(2*np.pi*phases)))&amp;#10;            # Normalize result&amp;#10;            pattern = np.real(pattern)&amp;#10;            self.pattern = (pattern-np.amin(pattern))/np.amax(pattern-np.amin(pattern))&amp;#10;&amp;#10;    def previewAnim(self, reps=3, mode='gs'):&amp;#10;        if reps == 1:&amp;#10;            reps = 2&amp;#10;        for i in range(reps-1):&amp;#10;            for k in range(self.size):&amp;#10;                cv2.imshow('Fractal Preview', self.pattern[k, :, :])&amp;#10;                cv2.waitKey(16)&amp;#10;&amp;#10;    def preview2d(self, index=-1, size=256):&amp;#10;        # 2d grayscale and BW previews&amp;#10;        if self.dimension == 2:&amp;#10;            preview = cv2.resize(self.pattern, [size, size], interpolation=cv2.INTER_AREA)&amp;#10;            prev_bw = (preview &gt; .5)&amp;#10;            previews = [preview, prev_bw]&amp;#10;            for i in range(2):&amp;#10;                plt.subplot(1, 2, i+1), plt.imshow(previews[i], 'Greys')&amp;#10;                plt.xticks([]), plt.yticks([])&amp;#10;            plt.show()&amp;#10;        # 2d slices of 3d fractals for preview&amp;#10;        if self.dimension == 3:&amp;#10;            if index != -1:&amp;#10;                assert 0 &lt; index &lt;= 100, &quot;Index must be between 1-100&quot;&amp;#10;                frame = int((index/100)*self.size)&amp;#10;            else:&amp;#10;                frame = -1&amp;#10;            preview = cv2.resize(self.pattern[frame, :, :], [size, size], interpolation=cv2.INTER_AREA)&amp;#10;            prev_bw = (preview &gt; .5)&amp;#10;            previews = [preview, prev_bw]&amp;#10;            for i in range(2):&amp;#10;                plt.subplot(1, 2, i+1), plt.imshow(previews[i], 'Greys')&amp;#10;                plt.xticks([]), plt.yticks([])&amp;#10;            plt.show()&amp;#10;&amp;#10;    def preview3d(self):&amp;#10;        # Check if 3 dimensional, and resize to 64x64x64&amp;#10;        assert self.pattern.ndim == 3, &quot;Fractal must be 3 dimensional&quot;&amp;#10;        prev3d = resize(self.pattern, (64, 64, 64))&amp;#10;&amp;#10;        # Create vectors for 3d plot&amp;#10;        z, x, y = prev3d.nonzero()&amp;#10;        color = prev3d.flatten()&amp;#10;        color = color[:]&amp;#10;&amp;#10;        #Display 3d Fractal&amp;#10;        fig = plt.figure()&amp;#10;        plt.rcParams[&quot;figure.figsize&quot;] = 5, 5&amp;#10;        ax = fig.add_subplot(111, projection='3d')&amp;#10;        ax.scatter(x, y, z, c=color, alpha=1, cmap=&quot;Greys&quot;)&amp;#10;        plt.show()&amp;#10;&amp;#10;    def boxcount(self, threshold=.5, frame=False):&amp;#10;        # 2d box count function&amp;#10;        if self.pattern.ndim == 2 or frame:&amp;#10;            def count(img, k):&amp;#10;                box = np.add.reduceat(&amp;#10;                    np.add.reduceat(fractal, np.arange(0, fractal.shape[0], k), axis=0),&amp;#10;                    np.arange(0, fractal.shape[1], k), axis=1)&amp;#10;                return len(np.where((box &gt; 0) &amp; (box &lt; k*k))[0])&amp;#10;&amp;#10;        # 3d box count function&amp;#10;        elif self.pattern.ndim == 3:&amp;#10;            def count(img, k):&amp;#10;                reducer = np.add.reduceat(np.add.reduceat(fractal, np.arange(0, fractal.shape[0], k), axis=0),&amp;#10;                                          np.arange(0, fractal.shape[1], k), axis=1)&amp;#10;                box = np.add.reduceat(reducer, np.arange(0, fractal.shape[2], k), axis=2)&amp;#10;                return len(np.where((box &gt; 0) &amp; (box &lt; k*k*k))[0])&amp;#10;&amp;#10;        # Threshold and box count&amp;#10;        fractal = (self.pattern &lt; threshold)&amp;#10;        p = min(fractal.shape)&amp;#10;        n = 2**np.floor(np.log(p)/np.log(2))&amp;#10;        n = int(np.log(n)/np.log(2))&amp;#10;        sizes = 2**np.arange(n-1, 0, -1)&amp;#10;        counts = []&amp;#10;        for size in sizes:&amp;#10;            counts.append(count(fractal, size))&amp;#10;        m, b = np.polyfit(np.log(sizes), np.log(counts), 1)&amp;#10;        return -m&amp;#10;&amp;#10;    def avgBoxcount(self):&amp;#10;        # Check if fractal is 3d&amp;#10;        assert self.pattern.ndim == 3, &quot;Average box count is for 3d fractals only.&quot;&amp;#10;&amp;#10;        def abc(fractal):&amp;#10;            def count(fractal, k):&amp;#10;                box = np.add.reduceat(&amp;#10;                    np.add.reduceat(fractal, np.arange(0, fractal.shape[0], k), axis=0),&amp;#10;                    np.arange(0, fractal.shape[1], k), axis=1)&amp;#10;                return len(np.where((box &gt; 0) &amp; (box &lt; k*k))[0])&amp;#10;&amp;#10;            # Threshold and box count&amp;#10;            fractal = (self.pattern &lt; .5)&amp;#10;            p = min(fractal.shape)&amp;#10;            n = 2**np.floor(np.log(p)/np.log(2))&amp;#10;            n = int(np.log(n)/np.log(2))&amp;#10;            sizes = 2**np.arange(n-1, 0, -1)&amp;#10;            counts = []&amp;#10;            for size in sizes:&amp;#10;                counts.append(count(fractal, size))&amp;#10;            m, b = np.polyfit(np.log(sizes), np.log(counts), 1)&amp;#10;            return -m&amp;#10;&amp;#10;        boxcounts = []&amp;#10;&amp;#10;        for i in range(0, len(self.pattern), 3):&amp;#10;            frame = self.pattern[i, :, :]&amp;#10;            slope2d = abc(frame)&amp;#10;            boxcounts.append(slope2d)&amp;#10;        return np.mean(boxcounts)&amp;#10;&amp;#10;    def write(self, location=&quot;E:/fractals&quot;):&amp;#10;&amp;#10;        # Check if root directory exists&amp;#10;        assert os.path.exists(location), &quot;Root directory doesn't exist.&quot;&amp;#10;&amp;#10;        # Save 2d fractal&amp;#10;        if self.dimension == 2:&amp;#10;            #folder = f&quot;{location}/{self.seed}/{self.beta}/&quot;&amp;#10;            #os.mkdir(folder)&amp;#10;            cv2.imwrite(f&quot;{self.beta}_{self.seed}.png&quot;, self.pattern*255)&amp;#10;        if self.dimension == 3:&amp;#10;            folder = f&quot;{location}/{self.seed}/{self.beta}/&quot;&amp;#10;            if not os.path.exists(folder):&amp;#10;                os.makedirs(folder)&amp;#10;            for i in range(self.size):&amp;#10;                cv2.imwrite(f&quot;{folder}{self.beta}_{self.seed}_{i:03d}.png&quot;, self.pattern[i, :, :]*255)" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Generate stimuli for 2AFC&amp;#10;betas = [beta_hi, beta_lo]&amp;#10;random.shuffle(betas) &amp;#10;# In case betas are equal, separate them slightly&amp;#10;if betas[0] == betas[1]:&amp;#10;    betas[0] = betas[0] - .01&amp;#10;&amp;#10;&amp;#10;fractal_l = Generate(beta=betas[0], seed=random.randint(123, 12300), size=256, dimension=2)&amp;#10;fractal_r = Generate(beta=betas[1], seed=random.randint(123, 12300), size=256, dimension=2)&amp;#10;&amp;#10;cv2.imwrite(f&quot;stimuli/fractal_left.png&quot;, fractal_l.pattern*255)&amp;#10;cv2.imwrite(f&quot;stimuli/fractal_right.png&quot;, fractal_r.pattern*255)&amp;#10;&amp;#10;# Find correct side&amp;#10;#higher_d = betas.index(max(betas)) &amp;#10;if betas[0] &gt; betas[1]:&amp;#10;    correct = image_l&amp;#10;else:&amp;#10;    correct = image_r&amp;#10;&amp;#10;# If answers fall below 50% accuracy, end block&amp;#10;if np.sum(performance[-4:-1]) &gt; 1:&amp;#10;    print(&quot;failure&quot;)&amp;#10;    nReps = 0&amp;#10;    #continueRoutine = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_l" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/fractal_left.png" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_l" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.33, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1000" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_r" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/fractal_right.png" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_r" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.33, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1000" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouse" plugin="None">
        <Param val="image_l, image_r" valType="list" updates="constant" name="clickable"/>
        <Param val="correct" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -.33)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$performance" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="adjust_beta">
      <CodeComponent name="increase_beta" plugin="None">
        <Param val="performance = []" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Optional: count increase decays convergence factor&amp;#10;count += 1&amp;#10;# Nudge betas toward target&amp;#10;converged_numbers = converge_numbers(betas, target, count)&amp;#10;# Name and store beta values&amp;#10;beta_hi = max(converged_numbers)&amp;#10;beta_lo = min(converged_numbers)&amp;#10;staircase.addData('beta_hi', beta_hi)&amp;#10;staircase.addData('beta_lo', beta_lo)&amp;#10;&amp;#10;# Append most recent answer to performance list &amp;#10;performance.append(mouse.corr[0])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="increase_beta" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Debrief">
      <TextComponent name="text_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank You!&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="staircase">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="num"/>
      <Param name="name" updates="None" val="staircase" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="adjust_beta"/>
    <LoopTerminator name="staircase"/>
    <Routine name="Debrief"/>
  </Flow>
</PsychoPy2experiment>
